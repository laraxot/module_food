<?php

namespace Modules\Food\Models\Panels;

use Illuminate\Http\Request;
//--- Services --
use Modules\Blog\Models\Post;
//--- Models ---
use Modules\Food\Models\Restaurant;
use Modules\Xot\Models\Panels\XotBasePanel;

class RestaurantPanel extends XotBasePanel {
    /**
     * The model the resource corresponds to.
     *
     * @var string
     */
    protected static $model = 'Modules\Food\Models\Restaurant';

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    protected static $title = 'title';

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    protected static $search = [];

    /**
     * The relationships that should be eager loaded on index queries.
     *
     * @var array
     */
    public function with() :array {
        return [];
    }

    public function search():array {
        return ['post.title', 'post.subtitle', 'locality'];
    }

    /**
     * Get the fields displayed by the resource.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return array
     */
    public function fields() {
        $auth_user_id = \Auth::check() ? \Auth::user()->auth_user_id : '';
        //$auth_user_id = \Auth::id(); //da valutare
        $post_table = with(new Post())->getTable();
        $restaurant_table = with(new Restaurant())->getTable();

        return [
            (object) [
                'type' => 'Text',
                'name' => 'post.title',
                'rules' => 'required|min:3|max:50|unique:'.$post_table.',title',
                'rules_messages' => [
                    'it' => ['required' => 'Nome Obbligatorio',
                        'unique' => 'Nome già in uso',
                        'min' => 'Inserire min 3 caratteri',
                        'max' => 'Inserire max 50 caratteri',
                    ],
                    'es' => ['required' => 'Name Required',
                        'unique' => 'Name already in use',
                        'min' => 'Enter at least 3 characters',
                        'max' => 'Enter up to 50 characters',
                    ],
                    'fr' => ['required' => 'Nom Obligatoire',
                        'unique' => 'Nom déjà utilisé',
                        'min' => 'Entrez au moins 3 caractères',
                        'max' => 'Entrez jusqu\'à 50 caractères',
                    ],
                ],
            ],
            (object) [
                'type' => 'Textarea',
                'name' => 'post.subtitle',
                'rules' => 'max:90',
                'rules_messages' => [
                    'it' => ['max' => 'Inserire max 90 caratteri'],
                    'es' => ['max' => 'Enter up to 90 characters'],
                    'fr' => ['max' => 'Entrez jusqu\'à 90 caractères'],
                ],
            ],
            (object) [
                //'type' => 'UnisharpImg', //'Html5UploadImg',
                'type' => 'Image',
                'name' => 'post.image_src',
                'col_bs_size' => 12,
                'except' => ['index'],
            ],
            (object) [
                'type' => 'Text',
                'name' => 'website',
                'except' => ['index'],
            ],
            (object) [
                'type' => 'Text',
                'name' => 'email',
                'col_bs_size' => 6,
                //'rules' => 'required|email|unique:'.$restaurant_table.',email',
                'rules_messages' => [
                    'it' => ['required' => 'Inserire una email valida',
                        'email' => 'Inserire una email valida',
                        'unique' => 'Email già in uso',
                    ],
                    'es' => ['required' => 'Enter a valid email address',
                        'email' => 'Enter a valid email address',
                        'unique' => 'Email already in use',
                    ],
                    'fr' => ['required' => 'Entrez une adresse email valide',
                        'email' => 'Entrez une adresse email valide',
                        'unique' => 'Email déjà utilisé',
                    ],
                ],
            ],
            (object) [
                'type' => 'Text',
                'name' => 'phone',
                'col_bs_size' => 6,
                'rules' => 'numeric',
                'rules_messages' => [
                    'it' => ['numeric' => 'Inserire un numero telefonico'],
                    'es' => ['numeric' => 'Enter a phone number'],
                    'fr' => ['numeric' => 'Entrez un numéro de téléphone'],
                ],
            ],
            (object) [
                'type' => 'Textarea',
                'name' => 'post.txt',
                'except' => ['index'],
                'rules' => 'max:300',
                'rules_messages' => [
                    'it' => [
                        'max' => 'Inserire max 300 caratteri',
                    ],
                    'es' => [
                        'max' => 'Enter up to 300 characters',
                    ],
                    'fr' => [
                        'max' => 'Entrez jusqu\'à 300 caractères',
                    ],
                ],
            ],
            (object) [
                'type' => 'Address',
                'sub_type' => 'Google',
                'name' => 'address',
                //'rules' => 'required',
                'rules_messages' => [
                    'it' => ['required' => 'Inserire un indirizzo valido'],
                    'es' => ['required' => 'Enter a valid address'],
                    'fr' => ['required' => 'Entrez une adresse valide'],
                ],
            ],
            (object) [
                //'type' => 'PrvCheckbox',
                'type' => 'Accept',
                'name' => 'restaurant_accept_rules',
                'except' => ['index', 'edit'],
                'text' => trans('pub_theme::restaurant.rules_txt'),
                // 'rules' => 'pivot_rules',
            ],
            (object) [
                'type' => 'Hidden',
                'name' => 'profiles.auth_user_id',
                'value' => $auth_user_id,
                'except' => ['index'],
            ],
            /*
            (object) [
                'type' => 'PivotRatings',
                'name' => 'ratings',
                //'value' => $auth_user_id,
                //'except'=>['index'],
            ],
            (object) [
                'type' => 'PivotRatingsAvg',
                'name' => 'ratings',
                //'value' => $auth_user_id,
                //'except'=>['index'],
            ],
            (object) [
                'type' => 'PivotRatings',
                'name' => 'my_ratings',
                //'value' => $auth_user_id,
                //'except'=>['index'],
            ],
            //*/
            (object) [
                'type' => 'Rating',
                'name' => 'myRatings',
                'except' => ['index'],
                'col_bs_size' => 12,
            ],
            (object) [
                'type' => 'Rating',
                'name' => 'ratings',
                'except' => ['edit', 'create'],
                'col_bs_size' => 12,
            ],
        ];
    }

    /**
     * Get the tabs available.
     *
     * @return array
     */
    public function tabs():array {
        if (in_admin()) {
            $tabs_name = ['cuisine', 'cuisine_cat', 'location', 'opening_hour', 'article', 'photo', 'event', 'profile', 'rating', 'my_rating'];
        } else {
            $tabs_name = ['cuisine', 'article', 'photo'];
        }

        return $tabs_name;
    }

    /**
     * Get the cards available for the request.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return array
     */
    public function cards() {
        return [];
    }

    /**
     * Get the filters available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return array
     */
    public function filters(Request $request = null):array {
        return [];
    }

    /**
     * Get the lenses available for the resource.
     *
     * @return array
     */
    public function lenses(Request $request) {
        return [];
    }

    /**
     * Get the actions available for the resource.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return array
     */
    public function actions():array {
        return [];
    }

    public function createSpecialCase() {
        $params = [];
        $params['lang'] = \App::getLocale();
        $params['container0'] = 'restaurant_owner';

        return redirect()->route('container0.create', $params);
    }
}
